Creating a Contact Management System with CRUD (Create, Read, Update, Delete) operations using a RESTful approach involves several steps. Below is a simplified example using Node.js with Express for the backend and a basic in-memory data structure to store contacts. This example does not include a database for simplicity, but you can easily extend it to use a database like MongoDB, PostgreSQL, etc.

Step 1: Set Up Your Environment
1.Initialize a Node.js Project:

''''''''''''''''''''''''''''''''''
mkdir contact-management-system
cd contact-management-system
npm init -y
''''''''''''''''''''''''''''''''''

2. Install Required Packages:

''''''''''''''''''''''''''''''''''
npm install express body-parser cors
''''''''''''''''''''''''''''''''''

Step 2: Create the Server
Create a file named server.js and add the following code:

''''''''''''''''''''''''''''''''''
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// In-memory contact storage
let contacts = [];

// CRUD Operations

// Create a new contact
app.post('/contacts', (req, res) => {
    const { name, email, phone } = req.body;
    const newContact = { id: contacts.length + 1, name, email, phone };
    contacts.push(newContact);
    res.status(201).json(newContact);
});

// Read all contacts
app.get('/contacts', (req, res) => {
    res.json(contacts);
});

// Read a single contact by ID
app.get('/contacts/:id', (req, res) => {
    const contact = contacts.find(c => c.id === parseInt(req.params.id));
    if (!contact) return res.status(404).send('Contact not found');
    res.json(contact);
});

// Update a contact by ID
app.put('/contacts/:id', (req, res) => {
    const contact = contacts.find(c => c.id === parseInt(req.params.id));
    if (!contact) return res.status(404).send('Contact not found');

    const { name, email, phone } = req.body;
    contact.name = name || contact.name;
    contact.email = email || contact.email;
    contact.phone = phone || contact.phone;

    res.json(contact);
});

// Delete a contact by ID
app.delete('/contacts/:id', (req, res) => {
    const contactIndex = contacts.findIndex(c => c.id === parseInt(req.params.id));
    if (contactIndex === -1) return res.status(404).send('Contact not found');

    contacts.splice(contactIndex, 1);
    res.status(204).send();
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
''''''''''''''''''''''''''''''''''
Step 3: Test the API
You can use tools like Postman or curl to test the API endpoints.

1. Create a Contact:

POST /contacts
 Body:


''''''''''''''''''''''''''''''''''
{
  "name": "John Doe",
  "email": "john@example.com",
  "phone": "123-456-7890"
}
''''''''''''''''''''''''''''''''''

2. Get All Contacts:

GET /contacts

3. Get a Single Contact:

GET /contacts/1

4. Update a Contact:

PUT /contacts/1
 Body



''''''''''''''''''''''''''''''''''
{
  "name": "John Smith",
  "email": "johnsmith@example.com"
}
''''''''''''''''''''''''''''''''''

5. Delete a Contact:

DELETE /contacts/1
Step 4: Extend the System
This is a basic implementation. You can extend it by:

Adding validation for input data.
Implementing a database (like MongoDB or PostgreSQL) for persistent storage.
Adding authentication and authorization.
Implementing pagination for the list of contacts.
Adding error handling and logging.
Conclusion
This example provides a simple RESTful API for managing contacts with CRUD operations. You can build upon this foundation to create a more robust contact management system.


### Step 5: Example of Using a Database

To extend the contact management system with a database, you can use MongoDB with Mongoose. Hereâ€™s how to set it up:

1. Install Mongoose:

''''''''''''''''''''''''''''''''''
npm install mongoose
''''''''''''''''''''''''''''''''''

2. Connect to MongoDB:

Update your server.js to include the MongoDB connection:

''''''''''''''''''''''''''''''''''
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://localhost/contact_management', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));
''''''''''''''''''''''''''''''''''

3. Define a Contact Model:
Create a new file named Contact.js in the same directory:

''''''''''''''''''''''''''''''''''
const mongoose = require('mongoose');

const contactSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true },
    phone: { type: String, required: true },
});

module.exports = mongoose.model('Contact', contactSchema);
''''''''''''''''''''''''''''''''''

4. Update CRUD Operations:
Modify the CRUD operations in server.js to use the Mongoose model:



''''''''''''''''''''''''''''''''''
const Contact = require('./Contact');

// Create a new contact
app.post('/contacts', async (req, res) => {
    const { name, email, phone } = req.body;
    const newContact = new Contact({ name, email, phone });
    await newContact.save();
    res.status(201).json(newContact);
});

// Read all contacts
app.get('/contacts', async (req, res) => {
    const contacts = await Contact.find();
    res.json(contacts);
});

// Read a single contact by ID
app.get('/contacts/:id', async (req, res) => {
    const contact = await Contact.findById(req.params.id);
    if (!contact) return res.status(404).send('Contact not found');
    res.json(contact);
});

// Update a contact by ID
app.put('/contacts/:id', async (req, res) => {
    const contact = await Contact.findById(req.params.id);
    if (!contact) return res.status(404).send('Contact not found');

    const { name, email, phone } = req.body;
    contact.name = name || contact.name;
    contact.email = email || contact.email;
    contact.phone = phone || contact.phone;

    await contact.save();
    res.json(contact);
});

// Delete a contact by ID
app.delete('/contacts/:id', async (req, res) => {
    const contact = await Contact.findByIdAndDelete(req.params.id);
    if (!contact) return res.status(404).send('Contact not found');
    res.status(204).send();
});
''''''''''''''''''''''''''''''''''

Step 6: Running the Application
Make sure your MongoDB server is running, then start your application:

''''''''''''''''''''''''''''''''''
node server.js
''''''''''''''''''''''''''''''''''

Conclusion
With these modifications, your contact management system now uses MongoDB for persistent storage, allowing you to manage contacts more effectively. You can further enhance the system by adding features like user authentication, input validation, and more advanced error handling.
